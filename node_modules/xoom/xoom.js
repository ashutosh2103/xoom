export function xoom(obj) {
    if(!this) throw "'xoom' is not defined!";
    verifyData(obj.data);
    window.addEventListener('DOMContentLoaded', (event) => {
        getElements(obj);
        getElementsLoop(obj);
    });
    this.getData = function(model) {
        if(!model)
            return obj.data;
        else    
            return obj.data[model];
    };
}

function verifyData(_object) {
    var _samename = [];
    for (const key in _object) {
        if (_samename.indexOf(key) === -1) {
            _samename.push(key);
            if (_object.hasOwnProperty(key)) {
                const element = _object[key];
                if (typeof (element) !== "object") {
                    throw "Invalid Data Object!";
                }
            }
        }
        else {
            throw "Invalid Data Object!";
        }
    }
}

function getElements(obj) {
    var element = document.querySelectorAll('[x-model]');
    element.forEach(function (el) {
        el.onkeyup = function () {
            sav(obj.data[el.getAttribute('x-model')], el.getAttribute('x-path'), el.value, false);
        }
        bindObject(obj.data[el.getAttribute('x-model')], null, el, "");
    });
}

function getElementsLoop(obj) {
    var element = document.querySelectorAll('[x-loop]');
    element.forEach(function (el) {
        var p = el.getAttribute('x-loop');
        var _s = p.split(" ");
        var data = obj.data[_s[2]];
        setAdjecentelements(data, el, _s[0]);
        el.remove();
    });
}

function bindObject(o, k, el, p) {
    for (k in o) {
        if (o.hasOwnProperty(k)) {
            if (typeof (o[k]) !== "object") {
                if (el.innerHTML === "") {
                    el.getAttributeNames().forEach(function (_a) {
                        var _v = el.getAttributeNode(_a);
                        if (_v.textContent === "{" + p + k + "}") {
                            _v.textContent = o[k];
                            el.setAttribute('x-path', p + k);
                            sav(o, k, p, true);
                        }
                    });
                }
                else {
                    if (!el.getAttribute('x-path')) {
                        el.setAttribute('x-path', el.innerHTML);
                    }
                    el.innerHTML = el.innerHTML.replace(new RegExp(escapeRegExp("{" + p + k + "}"), 'gi'), o[k]);

                }
            }
            else {
                if (o.length) p = "";
                p = p + k + "/";
                bindObject(o[k], null, el, p);
            }
        }
    }
}

//Helper Functions

const escapeRegExp = (string) => {
    return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')
}

const setAttributeValue = (obj, attr, val) => {
    for (const item of attr) {
        obj = obj[item];
    }
    obj = val;
}

function sav(obj, path, value, type) {
    const pList = path.split('/');
    const key = pList.pop();
    const pointer = pList.reduce((accumulator, currentValue) => {
        if (accumulator[currentValue] === undefined) accumulator[currentValue] = {};
        return accumulator[currentValue];
    }, obj);

    if (!type)
        pointer[key] = value;
    else
        anp(pointer, path);
}

var x = {};

function anp(obj, p) {
    var value = obj[p];
    var el = document.querySelectorAll(["[x-model]"]);
    Object.defineProperty(obj, p, {
        set: function (val) {
            value = val;
            for (const l of el) {
                if (l.innerHTML === "") {
                    if (l.getAttribute('x-path')) {
                        if (l.getAttribute('x-path').indexOf(p) !== -1)
                            l.value = obj[p];
                    }
                }
                else {
                    if (l.getAttribute('x-path')) {
                        var s = l.getAttribute('x-path');
                        var strs = s.substring(s.lastIndexOf("{") + 1, s.lastIndexOf("}"));
                        if (strs.indexOf(p) !== -1) {
                            l.innerHTML = s.replace(new RegExp(escapeRegExp("{" + strs + "}"), 'gi'), obj[p]);
                        }
                    }
                }
            }
        },
        get: function () {
            return value;
        }
    })
}

var skey = "", shtml = "", knames = [];
const checkPath = (data, key, ol) => {
    for (var subkey in data) {
        if (data.hasOwnProperty(subkey)) {
            if (typeof (data[subkey]) !== "object") {
                if(skey !== "") {
                    skey = skey + "/" + subkey;
                }
                else{
                    skey = skey + subkey;
                }
                
                shtml = shtml.replace(new RegExp(escapeRegExp("{" + key + "/" + skey + "}"), 'gi'), data[subkey]);
                
                if(knames.indexOf(subkey) === -1 || knames.indexOf(subkey) === knames.length - 1)
                    skey = "";
                else{
                    knames.forEach(k => {
                        skey = skey.replace(new RegExp(escapeRegExp("/" + k), 'gi'), "");
                    });
                }
            } else {
                if(skey !== "") subkey = "/" + subkey;
                skey = skey + subkey;
                knames = Object.getOwnPropertyNames(data[subkey]);
                checkPath(data[subkey], key, false);
            }
        }
    }

    if(ol) return shtml;
}

const setAdjecentelements = (data, startNode, key) => {

    var sibilings = [];

    for (var i = 0; i < data.length; i++) {
        var clone = startNode.cloneNode(true);
        var _sihtml = startNode.innerHTML;
        clone.removeAttribute('x-loop');
        if (typeof (data[i]) === "object") {
            skey = "";
            shtml = _sihtml;
            _sihtml = checkPath(data[i], key, true);
            clone.innerHTML = _sihtml;
            skey = ""; shtml = "";
        }
        else {
            clone.innerHTML = startNode.innerHTML.replace(new RegExp(escapeRegExp("{" + key + "}"), 'gi'), data[i]);
        }
        if (sibilings.length === 0) {
            startNode.insertAdjacentElement('afterend', clone);
            sibilings.push(startNode.nextElementSibling);
        }
        else {
            sibilings[i - 1].insertAdjacentElement('afterend', clone);
            sibilings.push(sibilings[i - 1].nextElementSibling);
        }
    }

    sibilings = null, startNode = null, key = null;
}